#include "walls_and_holes.h"

#include <algorithm>

#include "opencv2/opencv.hpp"

const std::vector<std::vector<MyPoint>> &WallPolygons() {
  static const std::vector<std::vector<MyPoint>> &result = []() {
    auto *out = new std::vector<std::vector<MyPoint>>{
        {
            {157, 5}, {157, 37}, {170, 37}, {171, 2},
        },

        {
            {2, 50}, {4, 61}, {59, 61}, {59, 50},
        },
        {
            {103, 53}, {101, 77}, {114, 79}, {114, 52},
        },
        {
            {59, 99}, {35, 99}, {35, 110}, {59, 108},
        },
        {
            {60, 146}, {2, 145}, {3, 157}, {60, 156},
        },
        {
            {102, 117},
            {102, 189},
            {34, 190},
            {32, 202},
            {113, 200},
            {114, 118},
        },
        {
            {46, 230}, {47, 276}, {61, 276}, {61, 233},
        },
        {
            {103, 231}, {101, 273}, {114, 275}, {115, 233},
        },
        {
            {37, 312},
            {37, 322},
            {100, 326},
            {103, 432},
            {115, 433},
            {114, 313},
            {36, 312},
        },
        {
            {36, 399}, {2, 396}, {4, 410}, {34, 411},
        },

        {
            {157, 372}, {158, 408}, {171, 410}, {171, 374},
        },
        {
            {160, 446}, {158, 479}, {171, 478}, {170, 444},
        },
        {
            {213, 436},
            {226, 436},
            {228, 371},
            {279, 368},
            {279, 355},
            {215, 359},
        },
        {
            {158, 288}, {168, 288}, {170, 233}, {158, 231},
        },
        {
            {212, 232}, {212, 287}, {225, 288}, {224, 232},
        },
        {
            {266, 209},
            {267, 322},
            {335, 323},
            {335, 313},
            {283, 309},
            {280, 208},
        },
        {
            {158, 143}, {156, 181}, {169, 181}, {171, 142},
        },
        {
            {158, 80}, {158, 111}, {173, 111}, {172, 83},
        },
        {
            {214, 50},  {211, 108}, {227, 109}, {229, 62},  {377, 61},
            {378, 234}, {392, 236}, {393, 161}, {493, 161}, {493, 151},
            {391, 148}, {392, 102}, {438, 102}, {439, 91},  {391, 90},
            {391, 2},   {378, 0},   {377, 46},  {215, 49},
        },
        {
            {268, 94},
            {266, 148},
            {215, 149},
            {212, 190},
            {224, 190},
            {226, 163},
            {279, 158},
            {280, 91},
        },
        {
            {323, 93}, {324, 129}, {338, 129}, {337, 92},
        },
        {
            {323, 159}, {324, 204}, {337, 204}, {337, 160},
        },
        {
            {269, 403}, {269, 437}, {283, 437}, {281, 401},
        },
        {
            {325, 360}, {325, 437}, {337, 437}, {338, 357},
        },
        {
            {373, 271}, {377, 353}, {382, 356}, {388, 270},
        },
        {
            {381, 426}, {382, 437}, {447, 439}, {447, 427},
        },
        {
            {434, 295},
            {434, 333},
            {480, 338},
            {484, 436},
            {497, 436},
            {495, 325},
            {447, 321},
            {446, 296},
        },
        {
            {426, 253},
            {426, 263},
            {480, 264},
            {484, 290},
            {496, 292},
            {494, 200},
            {480, 198},
            {482, 252},
            {427, 254},
        },
        {
            {481, 78},
            {480, 114},
            {491, 116},
            {493, 91},
            {531, 90},
            {536, 224},
            {549, 226},
            {546, 82},
        },
        {
            {534, 3}, {533, 36}, {546, 37}, {547, 4},
        },
        {
            {595, 39}, {595, 49}, {639, 50}, {640, 39},
        },
        {
            {588, 82}, {589, 131}, {605, 130}, {601, 84},
        },
        {
            {590, 167},
            {591, 274},
            {639, 277},
            {639, 264},
            {604, 261},
            {606, 169},
        },
        {
            {537, 266}, {538, 369}, {551, 368}, {551, 267},
        },
        {
            {537, 402}, {535, 435}, {553, 436}, {551, 403},
        },
        {
            {591, 442}, {590, 475}, {605, 477}, {605, 443},
        },
        {
            {322, 238}, {323, 275}, {338, 276}, {337, 240},
        }

    };

    for (auto &polygon : *out) {
      std::reverse(polygon.begin(), polygon.end());
    }

    return *out;
  }();
  return result;
}

const std::vector<MyPoint> &HoleCenters() {
  static const std::vector<MyPoint> &result = *new std::vector<MyPoint>{
      {300, 171}, {455, 232}, {24, 30},   {81, 96},   {25, 256},  {25, 376},
      {82, 342},  {83, 429},  {136, 95},  {135, 211}, {137, 297}, {137, 402},
      {191, 96},  {191, 149}, {191, 257}, {191, 333}, {192, 454}, {245, 182},
      {246, 334}, {301, 413}, {356, 79},  {355, 246}, {355, 360}, {409, 29},
      {410, 126}, {410, 180}, {412, 334}, {412, 403}, {411, 453}, {512, 30},
      {511, 111}, {513, 206}, {513, 359}, {564, 30},  {567, 182}, {567, 357},
      {568, 452}, {619, 67},  {620, 295}, {619, 390},
  };

  return result;
}

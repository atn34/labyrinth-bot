#include "walls_and_holes.h"

#include <algorithm>

#include "opencv2/opencv.hpp"

#include "camera_properties.h"

const std::vector<std::vector<Vec2>> &WallPolygons() {
  static const std::vector<std::vector<Vec2>> *result = []() {
    auto *out = new std::vector<std::vector<Vec2>>{
        {
            {4, 3}, {637, 3}, {637, 477}, {4, 477},
        },
        {
            {156, 1}, {169, 1}, {169, 35}, {156, 35},
        },
        {
            {1, 51}, {56, 51}, {56, 59}, {1, 59},
        },
        {
            {3, 146}, {54, 146}, {54, 154}, {3, 154},
        },
        {
            {101, 117}, {112, 117}, {112, 199}, {101, 199},
        },
        {
            {35, 191}, {97, 191}, {97, 200}, {35, 200},
        },
        {
            {46, 231}, {58, 231}, {58, 273}, {46, 273},
        },
        {
            {5, 399}, {33, 399}, {33, 407}, {5, 407},
        },
        {
            {37, 311}, {97, 311}, {97, 322}, {37, 322},
        },
        {
            {100, 312}, {114, 312}, {114, 433}, {100, 433},
        },
        {
            {211, 47}, {375, 47}, {375, 58}, {211, 58},
        },
        {
            {379, 0}, {387, 0}, {387, 233}, {379, 233},
        },
        {
            {392, 91}, {432, 91}, {432, 99}, {392, 99},
        },
        {
            {393, 150}, {487, 150}, {487, 158}, {393, 158},
        },
        {
            {212, 150}, {223, 150}, {223, 188}, {212, 188},
        },
        {
            {227, 151}, {279, 151}, {279, 161}, {227, 161},
        },
        {
            {269, 146}, {279, 146}, {279, 91}, {269, 91},
        },
        {
            {326, 92}, {332, 92}, {332, 127}, {326, 127},
        },
        {
            {323, 160}, {334, 160}, {334, 201}, {323, 201},
        },
        {
            {100, 232}, {113, 232}, {113, 272}, {100, 272},
        },
        {
            {156, 229}, {168, 229}, {168, 286}, {156, 286},
        },
        {
            {210, 231}, {223, 231}, {223, 286}, {210, 286},
        },
        {
            {157, 374}, {168, 374}, {168, 404}, {157, 404},
        },
        {
            {158, 442}, {169, 442}, {169, 478}, {158, 478},
        },
        {
            {100, 52}, {114, 52}, {114, 77}, {100, 77},
        },
        {
            {33, 99}, {58, 99}, {58, 107}, {33, 107},
        },
        {
            {159, 84}, {167, 84}, {167, 107}, {159, 107},
        },
        {
            {156, 142}, {167, 142}, {167, 177}, {156, 177},
        },
        {
            {225, 108}, {212, 108}, {212, 62}, {225, 62},
        },
        {
            {213, 433}, {225, 433}, {225, 356}, {213, 356},
        },
        {
            {228, 355}, {276, 355}, {276, 366}, {228, 366},
        },
        {
            {270, 398}, {279, 398}, {279, 432}, {270, 432},
        },
        {
            {321, 358}, {334, 358}, {334, 432}, {321, 432},
        },
        {
            {379, 426}, {444, 426}, {444, 435}, {379, 435},
        },
        {
            {380, 270}, {389, 270}, {389, 350}, {380, 350},
        },
        {
            {434, 297}, {443, 297}, {443, 332}, {434, 332},
        },
        {
            {445, 323}, {492, 323}, {492, 333}, {445, 333},
        },
        {
            {483, 339}, {491, 339}, {491, 432}, {483, 432},
        },
        {
            {537, 269}, {546, 269}, {546, 368}, {537, 368},
        },
        {
            {267, 207}, {278, 207}, {278, 321}, {267, 321},
        },
        {
            {280, 310}, {331, 310}, {331, 321}, {280, 321},
        },
        {
            {321, 238}, {334, 238}, {334, 273}, {321, 273},
        },
        {
            {426, 251}, {477, 251}, {477, 263}, {426, 263},
        },
        {
            {480, 199}, {493, 199}, {493, 290}, {480, 290},
        },
        {
            {479, 75}, {490, 75}, {490, 114}, {479, 114},
        },
        {
            {493, 77}, {545, 77}, {545, 86}, {493, 86},
        },
        {
            {533, 89}, {547, 89}, {547, 220}, {533, 220},
        },
        {
            {533, 2}, {545, 2}, {545, 34}, {533, 34},
        },
        {
            {592, 37}, {638, 37}, {638, 48}, {592, 48},
        },
        {
            {591, 168}, {603, 168}, {603, 262}, {591, 262},
        },
        {
            {593, 264}, {637, 264}, {637, 274}, {593, 274},
        },
        {
            {590, 443}, {602, 443}, {602, 478}, {590, 478},
        },
        {
            {536, 402}, {548, 402}, {548, 434}, {536, 434},
        },
        {
            {590, 82}, {602, 82}, {602, 128}, {590, 128},
        },
    };

    for (auto &polygon : *out) {
      for (auto &point : polygon) {
        point *= Vec2{CAMERA_WIDTH, CAMERA_HEIGHT} / Vec2{640, 480};
      }
    }

    return out;
  }();
  return *result;
}

const std::vector<Vec2> &HoleCenters() {
  static const std::vector<Vec2> *result = []() {
    auto *out = new std::vector<Vec2>{
        {300, 171}, {455, 232}, {24, 30},   {81, 96},   {25, 256},  {25, 376},
        {82, 342},  {83, 429},  {136, 95},  {135, 211}, {137, 297}, {137, 402},
        {191, 96},  {191, 149}, {191, 257}, {191, 333}, {192, 454}, {245, 182},
        {246, 334}, {301, 413}, {356, 79},  {355, 246}, {355, 360}, {409, 29},
        {410, 126}, {410, 180}, {412, 334}, {412, 403}, {411, 453}, {512, 30},
        {511, 111}, {513, 206}, {513, 359}, {564, 30},  {567, 182}, {567, 357},
        {568, 452}, {619, 67},  {620, 295}, {619, 390},
    };

    for (auto &point : *out) {
      point *= Vec2{CAMERA_WIDTH, CAMERA_HEIGHT} / Vec2{640, 480};
    }

    return out;
  }();

  return *result;
}
